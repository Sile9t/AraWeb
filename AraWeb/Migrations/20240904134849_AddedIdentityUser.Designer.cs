// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace AraWeb.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240904134849_AddedIdentityUser")]
    partial class AddedIdentityUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Apartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApartmentId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BedsCount")
                        .HasColumnType("int");

                    b.Property<int>("GuestsCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<long>("ReviewsCount")
                        .HasColumnType("bigint");

                    b.Property<int>("RoomsCount")
                        .HasColumnType("int");

                    b.Property<double>("Square")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Apartments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("49eec6a0-7d95-41f3-aae2-bed91c7062c8"),
                            Address = "10132 Becker Well, Prudencemouth, Peru",
                            BedsCount = 3,
                            GuestsCount = 11,
                            Name = "匩빋�씐㈒㏊嬩詇",
                            OwnerId = "16e81a02-08a8-4ecc-9b55-80ee5f4fb4dc",
                            Rate = 0.086084672697905068,
                            ReviewsCount = 526744234L,
                            RoomsCount = 2,
                            Square = 0.33234321178941711
                        },
                        new
                        {
                            Id = new Guid("4cb56703-b3f3-4160-9ed1-ea3b1884aab3"),
                            Address = "15104 Addie Overpass, Tiastad, Indonesia",
                            BedsCount = 4,
                            GuestsCount = 12,
                            Name = "邓躞Ꞣ䁴覠﩮ꧦ粄�",
                            OwnerId = "16e81a02-08a8-4ecc-9b55-80ee5f4fb4dc",
                            Rate = 0.095205159972546194,
                            ReviewsCount = 586076518L,
                            RoomsCount = 1,
                            Square = 0.37306226112969604
                        },
                        new
                        {
                            Id = new Guid("d250e216-13ee-4b1c-8250-57229417ffb6"),
                            Address = "8132 Dominique Courts, Lake Allisonfort, Libyan Arab Jamahiriya",
                            BedsCount = 3,
                            GuestsCount = 9,
                            Name = "꼛죰욑ﯡ䣶࿝◄鐎",
                            OwnerId = "fba14356-5a90-4756-b8f4-5e0d375630b8",
                            Rate = 0.043783132969357819,
                            ReviewsCount = 966366500L,
                            RoomsCount = 1,
                            Square = 0.15565815762644733
                        },
                        new
                        {
                            Id = new Guid("b44eea52-4cd8-4788-904b-c0c4c41d6d36"),
                            Address = "781 Kurtis Creek, Hicklefurt, Saint Helena",
                            BedsCount = 8,
                            GuestsCount = 4,
                            Name = "ִ躭ư甐ᖚ煮ഝ",
                            OwnerId = "fba14356-5a90-4756-b8f4-5e0d375630b8",
                            Rate = 0.033142839721575709,
                            ReviewsCount = 1693513771L,
                            RoomsCount = 1,
                            Square = 0.80001382055134607
                        },
                        new
                        {
                            Id = new Guid("c200fa81-cd98-4fe7-8a7f-5b3f555551db"),
                            Address = "90380 Benedict Lock, Kertzmannbury, Colombia",
                            BedsCount = 6,
                            GuestsCount = 12,
                            Name = "ᅓ꯹�ٽ⎳ㆥ鴫筞Ｙ",
                            OwnerId = "321420ce-3d16-4c79-ae3a-7614a67812d1",
                            Rate = 0.0042753090014248894,
                            ReviewsCount = 201129124L,
                            RoomsCount = 2,
                            Square = 0.7748539275515024
                        },
                        new
                        {
                            Id = new Guid("2e8cd2b7-9f36-44fc-b39c-2acfb6c1fc8a"),
                            Address = "09583 Clemens Plain, Wilbermouth, Ireland",
                            BedsCount = 3,
                            GuestsCount = 10,
                            Name = "假⽻털ꎱﯢ초휩ⷬꏮ韨",
                            OwnerId = "321420ce-3d16-4c79-ae3a-7614a67812d1",
                            Rate = 0.072125256690444089,
                            ReviewsCount = 921275470L,
                            RoomsCount = 1,
                            Square = 0.60050631080302341
                        },
                        new
                        {
                            Id = new Guid("7567e886-2032-42d2-839f-ef0492c4f927"),
                            Address = "652 Larson Prairie, Forestport, Kyrgyz Republic",
                            BedsCount = 1,
                            GuestsCount = 5,
                            Name = "ᨚ쥺衤෸⠇輗蓓钂《�",
                            OwnerId = "54d12ad0-b4da-488d-9a1a-ad6e32098177",
                            Rate = 0.026731343023977307,
                            ReviewsCount = 160694619L,
                            RoomsCount = 3,
                            Square = 0.84901921385082457
                        },
                        new
                        {
                            Id = new Guid("ad8efa22-3113-4dd4-aa79-cc37d97466e8"),
                            Address = "73353 Beahan Lane, Kreigershire, South Georgia and the South Sandwich Islands",
                            BedsCount = 8,
                            GuestsCount = 3,
                            Name = "‘䒝ﯰý῎㽫쉛偕k",
                            OwnerId = "54d12ad0-b4da-488d-9a1a-ad6e32098177",
                            Rate = 0.077126147313868992,
                            ReviewsCount = 984073980L,
                            RoomsCount = 2,
                            Square = 0.98876125801219061
                        },
                        new
                        {
                            Id = new Guid("45268d30-fa8b-4fec-8067-b08db2a25a60"),
                            Address = "77755 Mann Landing, Lake Jerelport, Eritrea",
                            BedsCount = 3,
                            GuestsCount = 11,
                            Name = "㡁农擜馽뤷ꌅㅑ惩㖫",
                            OwnerId = "5507f4df-2fac-4428-92fb-8c5da18a6976",
                            Rate = 0.004389061677205798,
                            ReviewsCount = 1745338022L,
                            RoomsCount = 4,
                            Square = 0.99136779752850945
                        },
                        new
                        {
                            Id = new Guid("cbd009ee-9024-42cc-b459-976777989bf7"),
                            Address = "505 Metz Ports, Lake Luna, South Africa",
                            BedsCount = 4,
                            GuestsCount = 9,
                            Name = "㺞瀩ⵥ஠�팟⓸ᗓ날쥖",
                            OwnerId = "5507f4df-2fac-4428-92fb-8c5da18a6976",
                            Rate = 0.03480128512865345,
                            ReviewsCount = 115416269L,
                            RoomsCount = 1,
                            Square = 0.72704874314556223
                        },
                        new
                        {
                            Id = new Guid("933f5dfa-b8ea-44bf-8045-bc62bd51524a"),
                            Address = "9120 Simone Harbor, Lake Alizeberg, Venezuela",
                            BedsCount = 7,
                            GuestsCount = 8,
                            Name = "볼伮㝛莵簟뒻긟肧ᗬ䘳",
                            OwnerId = "cefa5530-8d8d-4431-b551-67d75eebb313",
                            Rate = 0.01935986145582368,
                            ReviewsCount = 437151648L,
                            RoomsCount = 4,
                            Square = 0.94087338105029694
                        },
                        new
                        {
                            Id = new Guid("13dc134a-3f9c-4a0c-adfb-8e2f24932529"),
                            Address = "07119 Shaniya Island, Hermistonstad, Kyrgyz Republic",
                            BedsCount = 2,
                            GuestsCount = 11,
                            Name = "띢⤗鎞᯻漬ݴ釫瞬",
                            OwnerId = "cefa5530-8d8d-4431-b551-67d75eebb313",
                            Rate = 0.039374453656426285,
                            ReviewsCount = 758685472L,
                            RoomsCount = 3,
                            Square = 0.41466016972059089
                        },
                        new
                        {
                            Id = new Guid("8bc0b6cc-6c48-4b4b-87c8-938d6d326718"),
                            Address = "154 Javier Highway, North Goldenstad, Bermuda",
                            BedsCount = 8,
                            GuestsCount = 3,
                            Name = "㋴藴윬罰揚㧚折᫇�",
                            OwnerId = "6d173c0b-14fb-4f8e-bcbd-cbac0c0cc87e",
                            Rate = 0.039160907396088122,
                            ReviewsCount = 893414872L,
                            RoomsCount = 4,
                            Square = 0.23023719493163816
                        },
                        new
                        {
                            Id = new Guid("a24b2e56-1ec6-486a-8033-bf84239858eb"),
                            Address = "87522 Stokes Coves, South Cleve, Dominica",
                            BedsCount = 3,
                            GuestsCount = 1,
                            Name = "쳞輧贡撔昋驅ᴒ证蝐",
                            OwnerId = "6d173c0b-14fb-4f8e-bcbd-cbac0c0cc87e",
                            Rate = 0.0041568771843824431,
                            ReviewsCount = 1807573545L,
                            RoomsCount = 4,
                            Square = 0.88592323607411017
                        },
                        new
                        {
                            Id = new Guid("38fd0bd3-3ffc-43ee-862d-12349d08a596"),
                            Address = "200 Marvin Knolls, West Irving, Turkmenistan",
                            BedsCount = 5,
                            GuestsCount = 11,
                            Name = "蓙猓硺䉹�ـꐬ㬌",
                            OwnerId = "04fe9541-cfc0-4951-93fc-caf65c17c1db",
                            Rate = 0.040516370175228827,
                            ReviewsCount = 1681220667L,
                            RoomsCount = 4,
                            Square = 0.15406867528471244
                        },
                        new
                        {
                            Id = new Guid("1dbeeffd-4e8b-40f6-9f2b-d9471513b606"),
                            Address = "0167 Elena Springs, Volkmanborough, Pakistan",
                            BedsCount = 6,
                            GuestsCount = 1,
                            Name = "쏳얠爥墭눱�妄疥猋霰",
                            OwnerId = "04fe9541-cfc0-4951-93fc-caf65c17c1db",
                            Rate = 0.065019609528503608,
                            ReviewsCount = 1441739267L,
                            RoomsCount = 1,
                            Square = 0.73698411247231976
                        },
                        new
                        {
                            Id = new Guid("bfdbf68c-f4e8-4003-9354-e870fb96d27e"),
                            Address = "7300 Juana Stravenue, South Gerhardborough, Ethiopia",
                            BedsCount = 6,
                            GuestsCount = 7,
                            Name = "꘨스䏩枿⹾；侉䫣嵑�",
                            OwnerId = "1185d9f0-b511-4d3c-8b37-d9de82c4db39",
                            Rate = 0.068443370411677959,
                            ReviewsCount = 548121382L,
                            RoomsCount = 4,
                            Square = 0.37841684916962576
                        },
                        new
                        {
                            Id = new Guid("e96538c0-c854-4a1a-8b39-9ec6fbadcdcb"),
                            Address = "694 Ledner Ports, North Kristoffer, Niger",
                            BedsCount = 4,
                            GuestsCount = 6,
                            Name = "ꋶٖ覅蟎ꬤ⌉飗蛀ﮤ",
                            OwnerId = "1185d9f0-b511-4d3c-8b37-d9de82c4db39",
                            Rate = 0.088313964846845353,
                            ReviewsCount = 889358515L,
                            RoomsCount = 3,
                            Square = 0.42293483819530553
                        },
                        new
                        {
                            Id = new Guid("16782832-5b96-401c-b9a6-c0eb47c879f4"),
                            Address = "6797 Jakubowski Burgs, Hassanmouth, Congo",
                            BedsCount = 2,
                            GuestsCount = 11,
                            Name = "椈㌔�鼨菁찎꽩ꍪ퓧౵",
                            OwnerId = "98fa0699-d564-4c26-88b5-3d990951537a",
                            Rate = 0.0973245722610626,
                            ReviewsCount = 1427562338L,
                            RoomsCount = 1,
                            Square = 0.76408841991331156
                        },
                        new
                        {
                            Id = new Guid("68dbc805-f4f3-4605-94d0-6eb6abf8520c"),
                            Address = "016 Melyssa Club, South Hansmouth, Panama",
                            BedsCount = 2,
                            GuestsCount = 10,
                            Name = "祫Ჸ垿睇窆羅䷀�",
                            OwnerId = "98fa0699-d564-4c26-88b5-3d990951537a",
                            Rate = 0.040875162869217163,
                            ReviewsCount = 159198858L,
                            RoomsCount = 2,
                            Square = 0.81186010871622249
                        });
                });

            modelBuilder.Entity("Entities.Models.DateState", b =>
                {
                    b.Property<int>("DateStateId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DateStateId");

                    b.ToTable("DateState");

                    b.HasData(
                        new
                        {
                            DateStateId = 0,
                            Name = "Empty"
                        },
                        new
                        {
                            DateStateId = 1,
                            Name = "Reserved"
                        });
                });

            modelBuilder.Entity("Entities.Models.OccupState", b =>
                {
                    b.Property<int>("OccupStateId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OccupStateId");

                    b.ToTable("OccupState");

                    b.HasData(
                        new
                        {
                            OccupStateId = 0,
                            Name = "Created"
                        },
                        new
                        {
                            OccupStateId = 1,
                            Name = "Pushed"
                        },
                        new
                        {
                            OccupStateId = 2,
                            Name = "Submited"
                        },
                        new
                        {
                            OccupStateId = 3,
                            Name = "Reserved"
                        },
                        new
                        {
                            OccupStateId = 4,
                            Name = "Cancelled"
                        },
                        new
                        {
                            OccupStateId = 5,
                            Name = "Passed"
                        });
                });

            modelBuilder.Entity("Entities.Models.Occupancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EvictionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OccupStateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OccupancyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReservedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("OccupStateId");

                    b.HasIndex("ReservedById");

                    b.ToTable("Occupancies");
                });

            modelBuilder.Entity("Entities.Models.ReservationDate", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ApartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DateStateId")
                        .HasColumnType("int");

                    b.Property<decimal>("ExtraCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("OccupancyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Date", "ApartmentId");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("DateStateId");

                    b.HasIndex("OccupancyId");

                    b.ToTable("ReservationDates");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "16e81a02-08a8-4ecc-9b55-80ee5f4fb4dc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62e38839-56c8-486a-93dd-03e265320fef",
                            EmailConfirmed = false,
                            FirstName = "Boris",
                            LastName = "Crooks",
                            LockoutEnabled = false,
                            PhoneNumber = "(790) 214-0596 x77977",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "70e859ff-3781-478f-a960-dcfe9220309f",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "fba14356-5a90-4756-b8f4-5e0d375630b8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f9e65e8d-b160-41ff-b3ab-16f4bdb1b426",
                            EmailConfirmed = false,
                            FirstName = "Schuyler",
                            LastName = "Roberts",
                            LockoutEnabled = false,
                            PhoneNumber = "883-689-0174",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "43421ed0-97ce-4649-be4d-eeec5582e126",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "321420ce-3d16-4c79-ae3a-7614a67812d1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a742fb51-4b28-4095-af06-f642e6bf1f37",
                            EmailConfirmed = false,
                            FirstName = "Micah",
                            LastName = "Sauer",
                            LockoutEnabled = false,
                            PhoneNumber = "218.232.7266 x6289",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "01253c51-b7cd-44e3-975d-1bbfa7b821e0",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "54d12ad0-b4da-488d-9a1a-ad6e32098177",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e272805c-2696-419d-a828-9b95691248eb",
                            EmailConfirmed = false,
                            FirstName = "Isidro",
                            LastName = "Parker",
                            LockoutEnabled = false,
                            PhoneNumber = "1-613-568-2334",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9752dd0d-ae14-4adf-a8ef-792c5df8b695",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "5507f4df-2fac-4428-92fb-8c5da18a6976",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b99cdc1-c20f-4bd4-9937-87388ac55730",
                            EmailConfirmed = false,
                            FirstName = "Pauline",
                            LastName = "McClure",
                            LockoutEnabled = false,
                            PhoneNumber = "1-793-428-6042",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "441bf689-ff11-4be8-ae37-936fe55a597b",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "cefa5530-8d8d-4431-b551-67d75eebb313",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b070a333-05a2-4437-9d3d-810a8ec486ad",
                            EmailConfirmed = false,
                            FirstName = "Damaris",
                            LastName = "Corwin",
                            LockoutEnabled = false,
                            PhoneNumber = "278-214-7417 x435",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b3d00e12-d0c1-4df9-9389-37857805d2cd",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "6d173c0b-14fb-4f8e-bcbd-cbac0c0cc87e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17a2f6a5-650f-40ea-8ee8-db51d0a26cb9",
                            EmailConfirmed = false,
                            FirstName = "Rhiannon",
                            LastName = "Batz",
                            LockoutEnabled = false,
                            PhoneNumber = "237.818.1548 x247",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e8316e72-2b0f-44db-8866-daaf23fca1a1",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "04fe9541-cfc0-4951-93fc-caf65c17c1db",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fba07b89-28e8-480f-a4b8-aa107bd294d1",
                            EmailConfirmed = false,
                            FirstName = "Buster",
                            LastName = "Olson",
                            LockoutEnabled = false,
                            PhoneNumber = "1-312-320-1559",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a4119ec-3ad8-4793-a0d7-bf329dafcc53",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "1185d9f0-b511-4d3c-8b37-d9de82c4db39",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3b42fb4-3a0e-4356-a0a0-be79fd011492",
                            EmailConfirmed = false,
                            FirstName = "Clotilde",
                            LastName = "Wisozk",
                            LockoutEnabled = false,
                            PhoneNumber = "572-730-7974",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "42b234b9-2992-48c1-b948-93ee069c4bf8",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "98fa0699-d564-4c26-88b5-3d990951537a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec725f61-7158-45c9-80e2-05bf78b0d58c",
                            EmailConfirmed = false,
                            FirstName = "Cordia",
                            LastName = "Gibson",
                            LockoutEnabled = false,
                            PhoneNumber = "290.743.1619 x8094",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9ca1a074-1bed-40e2-9101-3290f6028f96",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "56365493-aa14-4bda-a617-f839fb5401b3",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "2e28c02e-f094-40df-8eec-8ce9c550c7ca",
                            Name = "ApartmentOwner",
                            NormalizedName = "APARTMENT_OWNER"
                        },
                        new
                        {
                            Id = "0cea8b97-1d44-4abc-88c2-0a01a180349c",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "5e35e787-0820-4524-bd32-1b99cabf3654",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Apartment", b =>
                {
                    b.HasOne("Entities.Models.User", "Owner")
                        .WithMany("Apartments")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Entities.Models.Occupancy", b =>
                {
                    b.HasOne("Entities.Models.Apartment", "Apartment")
                        .WithMany("Occupancies")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Models.OccupState", "State")
                        .WithMany("Occupancies")
                        .HasForeignKey("OccupStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "ReservedBy")
                        .WithMany("Occupancies")
                        .HasForeignKey("ReservedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Apartment");

                    b.Navigation("ReservedBy");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Entities.Models.ReservationDate", b =>
                {
                    b.HasOne("Entities.Models.Apartment", null)
                        .WithMany("ReservationDates")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.DateState", "DateState")
                        .WithMany("Dates")
                        .HasForeignKey("DateStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Occupancy", "Occupancy")
                        .WithMany("ReservedDates")
                        .HasForeignKey("OccupancyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DateState");

                    b.Navigation("Occupancy");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Apartment", b =>
                {
                    b.Navigation("Occupancies");

                    b.Navigation("ReservationDates");
                });

            modelBuilder.Entity("Entities.Models.DateState", b =>
                {
                    b.Navigation("Dates");
                });

            modelBuilder.Entity("Entities.Models.OccupState", b =>
                {
                    b.Navigation("Occupancies");
                });

            modelBuilder.Entity("Entities.Models.Occupancy", b =>
                {
                    b.Navigation("ReservedDates");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("Apartments");

                    b.Navigation("Occupancies");
                });
#pragma warning restore 612, 618
        }
    }
}

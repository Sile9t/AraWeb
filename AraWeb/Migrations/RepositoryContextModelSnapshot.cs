// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace AraWeb.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Apartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApartmentId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BedsCount")
                        .HasColumnType("int");

                    b.Property<int>("GuestsCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<long>("ReviewsCount")
                        .HasColumnType("bigint");

                    b.Property<int>("RoomsCount")
                        .HasColumnType("int");

                    b.Property<double>("Square")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Apartments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f8d831bf-16a4-445c-8149-ee4a40fa0a4c"),
                            Address = "1527 Becker Forges, Lewshire, Colombia",
                            BedsCount = 1,
                            GuestsCount = 8,
                            Name = "Laudantium amet corporis.",
                            OwnerId = new Guid("c84d9279-27bf-4db2-ba30-6367911677b8"),
                            Rate = 8.8000000000000007,
                            ReviewsCount = 82L,
                            RoomsCount = 2,
                            Square = 25.890000000000001
                        },
                        new
                        {
                            Id = new Guid("5f10b441-ac22-41d1-b855-ce8292fa035a"),
                            Address = "370 Celine Manors, West Daphneemouth, Northern Mariana Islands",
                            BedsCount = 4,
                            GuestsCount = 5,
                            Name = "Eveniet dolores quia.",
                            OwnerId = new Guid("c84d9279-27bf-4db2-ba30-6367911677b8"),
                            Rate = 3.8999999999999999,
                            ReviewsCount = 38L,
                            RoomsCount = 3,
                            Square = 94.829999999999998
                        },
                        new
                        {
                            Id = new Guid("a3f0b07d-9053-4543-a0ce-ce97df9620bf"),
                            Address = "743 Cassin Point, South Eveline, Samoa",
                            BedsCount = 7,
                            GuestsCount = 5,
                            Name = "Saepe quos incidunt.",
                            OwnerId = new Guid("c4585018-984a-4a38-a998-e98eb0566350"),
                            Rate = 2.8999999999999999,
                            ReviewsCount = 93L,
                            RoomsCount = 3,
                            Square = 53.539999999999999
                        },
                        new
                        {
                            Id = new Guid("98eadb3c-e378-4436-a4bb-a9aef9eec82b"),
                            Address = "8598 Jovany Hills, North Dean, Paraguay",
                            BedsCount = 2,
                            GuestsCount = 12,
                            Name = "Inventore cupiditate ut.",
                            OwnerId = new Guid("c4585018-984a-4a38-a998-e98eb0566350"),
                            Rate = 9.4000000000000004,
                            ReviewsCount = 36L,
                            RoomsCount = 2,
                            Square = 94.450000000000003
                        },
                        new
                        {
                            Id = new Guid("32e912fb-43ad-43f4-950b-f512485c63e0"),
                            Address = "799 Stehr Station, South Don, Kyrgyz Republic",
                            BedsCount = 8,
                            GuestsCount = 5,
                            Name = "Et voluptatem ex.",
                            OwnerId = new Guid("f377b36a-fc9a-42dd-8ac1-f2a72688b033"),
                            Rate = 3.2000000000000002,
                            ReviewsCount = 50L,
                            RoomsCount = 2,
                            Square = 9.3900000000000006
                        },
                        new
                        {
                            Id = new Guid("5293c09c-0b37-4dd9-b274-ecefcf20471f"),
                            Address = "332 Morgan Avenue, West Ulises, Bermuda",
                            BedsCount = 2,
                            GuestsCount = 12,
                            Name = "Cumque non quod.",
                            OwnerId = new Guid("f377b36a-fc9a-42dd-8ac1-f2a72688b033"),
                            Rate = 8.5,
                            ReviewsCount = 45L,
                            RoomsCount = 3,
                            Square = 47.789999999999999
                        },
                        new
                        {
                            Id = new Guid("fd9c4e82-8a6c-4ba8-8276-288719fd000b"),
                            Address = "642 Geoffrey Squares, Wittingfort, Cameroon",
                            BedsCount = 6,
                            GuestsCount = 4,
                            Name = "Consequuntur quo doloremque.",
                            OwnerId = new Guid("df48d3cf-95fd-4ee9-a94e-0e00fb265d2c"),
                            Rate = 1.3,
                            ReviewsCount = 37L,
                            RoomsCount = 2,
                            Square = 80.709999999999994
                        },
                        new
                        {
                            Id = new Guid("7444033b-4884-4b97-9273-4871a587f0f6"),
                            Address = "855 Schuster Valleys, North Jettieland, Saint Kitts and Nevis",
                            BedsCount = 2,
                            GuestsCount = 12,
                            Name = "Ullam repellendus ipsa.",
                            OwnerId = new Guid("df48d3cf-95fd-4ee9-a94e-0e00fb265d2c"),
                            Rate = 5.2000000000000002,
                            ReviewsCount = 63L,
                            RoomsCount = 4,
                            Square = 38.880000000000003
                        },
                        new
                        {
                            Id = new Guid("10f45add-a8c9-4f2b-b36c-64192b04b5fa"),
                            Address = "4022 Tracey Branch, Port Alexa, Azerbaijan",
                            BedsCount = 6,
                            GuestsCount = 11,
                            Name = "Exercitationem sint repellat.",
                            OwnerId = new Guid("b827da64-682e-437a-9ff5-622f82da7eca"),
                            Rate = 1.8,
                            ReviewsCount = 33L,
                            RoomsCount = 3,
                            Square = 88.049999999999997
                        },
                        new
                        {
                            Id = new Guid("768bb65e-35b6-4a9d-9c9f-0e625049fd73"),
                            Address = "48728 Savanna Stravenue, Quintonville, Turkey",
                            BedsCount = 3,
                            GuestsCount = 7,
                            Name = "Alias qui dolor.",
                            OwnerId = new Guid("b827da64-682e-437a-9ff5-622f82da7eca"),
                            Rate = 5.5999999999999996,
                            ReviewsCount = 63L,
                            RoomsCount = 1,
                            Square = 22.620000000000001
                        },
                        new
                        {
                            Id = new Guid("1d884ee4-fad7-4036-85f3-cb7d77128cfa"),
                            Address = "27091 Rath Corner, Lake Everett, Antigua and Barbuda",
                            BedsCount = 1,
                            GuestsCount = 3,
                            Name = "Eligendi mollitia libero.",
                            OwnerId = new Guid("3cc3e5fc-d7d9-40e9-91fe-9d28dd5e6094"),
                            Rate = 9.6999999999999993,
                            ReviewsCount = 38L,
                            RoomsCount = 4,
                            Square = 32.859999999999999
                        },
                        new
                        {
                            Id = new Guid("9b02d999-93be-47a4-a782-59ef4b88d3d6"),
                            Address = "08223 Glenda Forest, Kertzmannton, Uzbekistan",
                            BedsCount = 3,
                            GuestsCount = 4,
                            Name = "Et est error.",
                            OwnerId = new Guid("3cc3e5fc-d7d9-40e9-91fe-9d28dd5e6094"),
                            Rate = 6.2000000000000002,
                            ReviewsCount = 61L,
                            RoomsCount = 4,
                            Square = 0.56999999999999995
                        },
                        new
                        {
                            Id = new Guid("382f795a-4bca-493b-929a-d92fc69d009e"),
                            Address = "7486 Rosina Plains, Bernitaberg, Tuvalu",
                            BedsCount = 8,
                            GuestsCount = 10,
                            Name = "Ratione in distinctio.",
                            OwnerId = new Guid("0672a2cd-45c5-410c-bf4c-b78847be080b"),
                            Rate = 4.5,
                            ReviewsCount = 39L,
                            RoomsCount = 4,
                            Square = 76.489999999999995
                        },
                        new
                        {
                            Id = new Guid("f1c7b408-4f08-48d9-a59a-d97bb31c15b6"),
                            Address = "1266 Antonetta Ridges, Lake Otha, Western Sahara",
                            BedsCount = 1,
                            GuestsCount = 10,
                            Name = "Temporibus laborum ea.",
                            OwnerId = new Guid("0672a2cd-45c5-410c-bf4c-b78847be080b"),
                            Rate = 3.1000000000000001,
                            ReviewsCount = 90L,
                            RoomsCount = 4,
                            Square = 30.140000000000001
                        },
                        new
                        {
                            Id = new Guid("5b4bf18f-b3bd-49be-970c-c18701971045"),
                            Address = "0689 Peter Neck, McDermottfurt, Guam",
                            BedsCount = 8,
                            GuestsCount = 6,
                            Name = "Pariatur autem placeat.",
                            OwnerId = new Guid("bd6d34d8-3bd7-4bbe-9995-a6bc8803a61e"),
                            Rate = 6.9000000000000004,
                            ReviewsCount = 60L,
                            RoomsCount = 2,
                            Square = 70.769999999999996
                        },
                        new
                        {
                            Id = new Guid("2227f501-86bb-44d7-955e-7520b4f20ab0"),
                            Address = "33074 Helene Forges, Lake Frederique, Papua New Guinea",
                            BedsCount = 8,
                            GuestsCount = 5,
                            Name = "Sed illo mollitia.",
                            OwnerId = new Guid("bd6d34d8-3bd7-4bbe-9995-a6bc8803a61e"),
                            Rate = 1.6000000000000001,
                            ReviewsCount = 86L,
                            RoomsCount = 1,
                            Square = 31.98
                        },
                        new
                        {
                            Id = new Guid("8844ae44-308f-4a51-aadf-4b0eefd40321"),
                            Address = "24048 Goodwin Mountain, West Maximus, Dominican Republic",
                            BedsCount = 6,
                            GuestsCount = 12,
                            Name = "Ea quia similique.",
                            OwnerId = new Guid("06936d4d-7c6c-48a9-8157-91e58277121e"),
                            Rate = 1.2,
                            ReviewsCount = 65L,
                            RoomsCount = 1,
                            Square = 21.199999999999999
                        },
                        new
                        {
                            Id = new Guid("793ca25e-fb8a-465b-9b0b-ed7f7374e0ef"),
                            Address = "73721 Goldner Fords, Kirlinmouth, Wallis and Futuna",
                            BedsCount = 6,
                            GuestsCount = 1,
                            Name = "Temporibus exercitationem sit.",
                            OwnerId = new Guid("06936d4d-7c6c-48a9-8157-91e58277121e"),
                            Rate = 8.1999999999999993,
                            ReviewsCount = 41L,
                            RoomsCount = 1,
                            Square = 70.689999999999998
                        },
                        new
                        {
                            Id = new Guid("bbbbe96c-e52e-4ea8-9513-a3ca7df7b8f3"),
                            Address = "654 Tanner Curve, Kyliefurt, Lao People's Democratic Republic",
                            BedsCount = 2,
                            GuestsCount = 8,
                            Name = "Praesentium enim aut.",
                            OwnerId = new Guid("07775568-8345-49ac-87bf-29b93c867f01"),
                            Rate = 1.0,
                            ReviewsCount = 28L,
                            RoomsCount = 3,
                            Square = 61.93
                        },
                        new
                        {
                            Id = new Guid("f47eb9a8-082b-42ea-96f8-abdcb3acff1a"),
                            Address = "339 Abner Springs, O'Connerburgh, Philippines",
                            BedsCount = 6,
                            GuestsCount = 12,
                            Name = "Nesciunt et praesentium.",
                            OwnerId = new Guid("07775568-8345-49ac-87bf-29b93c867f01"),
                            Rate = 0.29999999999999999,
                            ReviewsCount = 43L,
                            RoomsCount = 3,
                            Square = 19.239999999999998
                        });
                });

            modelBuilder.Entity("Entities.Models.DateState", b =>
                {
                    b.Property<int>("DateStateId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DateStateId");

                    b.ToTable("DateState");

                    b.HasData(
                        new
                        {
                            DateStateId = 0,
                            Name = "Empty"
                        },
                        new
                        {
                            DateStateId = 1,
                            Name = "Reserved"
                        });
                });

            modelBuilder.Entity("Entities.Models.OccupState", b =>
                {
                    b.Property<int>("OccupStateId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OccupStateId");

                    b.ToTable("OccupState");

                    b.HasData(
                        new
                        {
                            OccupStateId = 0,
                            Name = "Created"
                        },
                        new
                        {
                            OccupStateId = 1,
                            Name = "Pushed"
                        },
                        new
                        {
                            OccupStateId = 2,
                            Name = "Submited"
                        },
                        new
                        {
                            OccupStateId = 3,
                            Name = "Reserved"
                        },
                        new
                        {
                            OccupStateId = 4,
                            Name = "Cancelled"
                        },
                        new
                        {
                            OccupStateId = 5,
                            Name = "Passed"
                        });
                });

            modelBuilder.Entity("Entities.Models.Occupancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EvictionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OccupStateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OccupancyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReservedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("OccupStateId");

                    b.HasIndex("ReservedById");

                    b.ToTable("Occupancies");
                });

            modelBuilder.Entity("Entities.Models.ReservationDate", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ApartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<int>("DateStateId")
                        .HasColumnType("int");

                    b.Property<double>("ExtraCharge")
                        .HasColumnType("float");

                    b.Property<Guid?>("OccupancyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Date", "ApartmentId");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("DateStateId");

                    b.HasIndex("OccupancyId");

                    b.ToTable("ReservationDates");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExperyTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c84d9279-27bf-4db2-ba30-6367911677b8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3ba5840-a4ea-42f7-a86e-94ea98a0ce84",
                            EmailConfirmed = false,
                            FirstName = "Conner",
                            LastName = "Satterfield",
                            LockoutEnabled = false,
                            PhoneNumber = "1-200-629-1455 x00463",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("c4585018-984a-4a38-a998-e98eb0566350"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e41efdb-e483-44c7-979b-34ef93d419d7",
                            EmailConfirmed = false,
                            FirstName = "Sadye",
                            LastName = "MacGyver",
                            LockoutEnabled = false,
                            PhoneNumber = "310.493.6064",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("f377b36a-fc9a-42dd-8ac1-f2a72688b033"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8a60a7d8-576b-4c5e-a820-5af0709c93ff",
                            EmailConfirmed = false,
                            FirstName = "Shawna",
                            LastName = "Abshire",
                            LockoutEnabled = false,
                            PhoneNumber = "504.279.6319 x9527",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("df48d3cf-95fd-4ee9-a94e-0e00fb265d2c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "45e3b430-ae3d-442e-941a-5c468d7ca282",
                            EmailConfirmed = false,
                            FirstName = "Blake",
                            LastName = "Crona",
                            LockoutEnabled = false,
                            PhoneNumber = "776.810.1225 x39649",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("b827da64-682e-437a-9ff5-622f82da7eca"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "49556839-f378-4f8b-b2ce-4b9e884b4853",
                            EmailConfirmed = false,
                            FirstName = "Rick",
                            LastName = "Daniel",
                            LockoutEnabled = false,
                            PhoneNumber = "276.428.0371",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("3cc3e5fc-d7d9-40e9-91fe-9d28dd5e6094"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e0a5ad29-4d5e-465d-9ee4-e0a3619e456e",
                            EmailConfirmed = false,
                            FirstName = "Theresia",
                            LastName = "Sanford",
                            LockoutEnabled = false,
                            PhoneNumber = "835.981.4306",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("0672a2cd-45c5-410c-bf4c-b78847be080b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2781583a-02ff-4891-b4a5-f99348e50d0b",
                            EmailConfirmed = false,
                            FirstName = "Lazaro",
                            LastName = "O'Reilly",
                            LockoutEnabled = false,
                            PhoneNumber = "663-275-4207 x504",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("bd6d34d8-3bd7-4bbe-9995-a6bc8803a61e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3e720e03-9f28-408d-97e0-bbc55daa7eb2",
                            EmailConfirmed = false,
                            FirstName = "Rocio",
                            LastName = "Howe",
                            LockoutEnabled = false,
                            PhoneNumber = "(865) 300-0246 x36018",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("06936d4d-7c6c-48a9-8157-91e58277121e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3ff0b18-59a1-46bc-a323-eba08c62a7e7",
                            EmailConfirmed = false,
                            FirstName = "Jazlyn",
                            LastName = "Carter",
                            LockoutEnabled = false,
                            PhoneNumber = "(427) 521-9482",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("07775568-8345-49ac-87bf-29b93c867f01"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2bee5d88-ca3c-42df-ac8c-f27f6f95937d",
                            EmailConfirmed = false,
                            FirstName = "Tillman",
                            LastName = "Torp",
                            LockoutEnabled = false,
                            PhoneNumber = "(215) 379-6532 x7094",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f2397b2-c6f8-403d-882e-ca5657e9aafc"),
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("70cd7fc4-44cd-42af-8ec6-91ef7917d805"),
                            Name = "ApartmentOwner",
                            NormalizedName = "APARTMENT_OWNER"
                        },
                        new
                        {
                            Id = new Guid("8bfdd6f2-6491-45e2-80d9-f0c03af41cf1"),
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("e4bb7cef-b30c-4827-8a89-cb38c1c6310d"),
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Apartment", b =>
                {
                    b.HasOne("Entities.Models.User", "Owner")
                        .WithMany("Apartments")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Entities.Models.Occupancy", b =>
                {
                    b.HasOne("Entities.Models.Apartment", "Apartment")
                        .WithMany("Occupancies")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Models.OccupState", "State")
                        .WithMany("Occupancies")
                        .HasForeignKey("OccupStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "ReservedBy")
                        .WithMany("Occupancies")
                        .HasForeignKey("ReservedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Apartment");

                    b.Navigation("ReservedBy");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Entities.Models.ReservationDate", b =>
                {
                    b.HasOne("Entities.Models.Apartment", null)
                        .WithMany("ReservationDates")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.DateState", "DateState")
                        .WithMany("Dates")
                        .HasForeignKey("DateStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Occupancy", "Occupancy")
                        .WithMany("ReservedDates")
                        .HasForeignKey("OccupancyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DateState");

                    b.Navigation("Occupancy");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Apartment", b =>
                {
                    b.Navigation("Occupancies");

                    b.Navigation("ReservationDates");
                });

            modelBuilder.Entity("Entities.Models.DateState", b =>
                {
                    b.Navigation("Dates");
                });

            modelBuilder.Entity("Entities.Models.OccupState", b =>
                {
                    b.Navigation("Occupancies");
                });

            modelBuilder.Entity("Entities.Models.Occupancy", b =>
                {
                    b.Navigation("ReservedDates");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("Apartments");

                    b.Navigation("Occupancies");
                });
#pragma warning restore 612, 618
        }
    }
}

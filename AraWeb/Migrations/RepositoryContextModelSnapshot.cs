// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace AraWeb.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Apartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApartmentId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BedsCount")
                        .HasColumnType("int");

                    b.Property<int>("GuestsCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<long>("ReviewsCount")
                        .HasColumnType("bigint");

                    b.Property<int>("RoomsCount")
                        .HasColumnType("int");

                    b.Property<double>("Square")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Apartments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3688429c-47b0-4e23-9e57-33ee98f588b5"),
                            Address = "368 Bernie Meadows, Eloisemouth, Pakistan",
                            BedsCount = 2,
                            GuestsCount = 8,
                            Name = "Qui hic quia.",
                            OwnerId = "b9cd9883-962a-4142-b293-1c9f10416063",
                            Rate = 0.0033373327577701506,
                            ReviewsCount = 92L,
                            RoomsCount = 4,
                            Square = 0.6319639063966318
                        },
                        new
                        {
                            Id = new Guid("c1f6bd65-7d25-4db6-94c1-39599c081f66"),
                            Address = "97804 Kristoffer Loop, East Isabella, Reunion",
                            BedsCount = 2,
                            GuestsCount = 10,
                            Name = "Quas error soluta.",
                            OwnerId = "b9cd9883-962a-4142-b293-1c9f10416063",
                            Rate = 0.045628183308208059,
                            ReviewsCount = 501L,
                            RoomsCount = 1,
                            Square = 0.028801835965608716
                        },
                        new
                        {
                            Id = new Guid("bf64fa9a-774d-4e99-b17d-a579efe2a25e"),
                            Address = "59491 Green Neck, South Barneyville, Peru",
                            BedsCount = 5,
                            GuestsCount = 4,
                            Name = "Amet quae ut.",
                            OwnerId = "0323fbbf-53bd-47d6-a440-53ac523cf4d8",
                            Rate = 0.075392219673554986,
                            ReviewsCount = 327L,
                            RoomsCount = 4,
                            Square = 0.86381195879573558
                        },
                        new
                        {
                            Id = new Guid("1e86879d-14a8-4820-a39a-647d60b94b2e"),
                            Address = "224 Hoppe Road, West Blaise, Benin",
                            BedsCount = 7,
                            GuestsCount = 4,
                            Name = "Excepturi dicta expedita.",
                            OwnerId = "0323fbbf-53bd-47d6-a440-53ac523cf4d8",
                            Rate = 0.047790940867059789,
                            ReviewsCount = 405L,
                            RoomsCount = 1,
                            Square = 0.58705321458708981
                        },
                        new
                        {
                            Id = new Guid("e4f9a37b-aacb-4418-845f-d64dd5f2d5cf"),
                            Address = "36348 Lesly Summit, South Eliane, Guatemala",
                            BedsCount = 2,
                            GuestsCount = 1,
                            Name = "Nisi animi ut.",
                            OwnerId = "d3948b32-992b-4165-acb1-1912bd51d3f7",
                            Rate = 0.032361017141493038,
                            ReviewsCount = 370L,
                            RoomsCount = 2,
                            Square = 0.24518564579344895
                        },
                        new
                        {
                            Id = new Guid("1ae934f5-137c-4f51-bc01-20b02eecfe0b"),
                            Address = "066 Wendy Lane, Schoentown, Niue",
                            BedsCount = 5,
                            GuestsCount = 5,
                            Name = "Repellendus id aut.",
                            OwnerId = "d3948b32-992b-4165-acb1-1912bd51d3f7",
                            Rate = 0.018625203199539014,
                            ReviewsCount = 335L,
                            RoomsCount = 3,
                            Square = 0.042302550387608891
                        },
                        new
                        {
                            Id = new Guid("243b0c6a-bd37-4f7b-b29f-9983392ef867"),
                            Address = "1520 Ariane Cliffs, Tedland, Saint Martin",
                            BedsCount = 5,
                            GuestsCount = 7,
                            Name = "Voluptate quo fuga.",
                            OwnerId = "ba8a57b0-95e2-4064-9bdb-ebe5ddf8044e",
                            Rate = 0.012128251761911787,
                            ReviewsCount = 125L,
                            RoomsCount = 3,
                            Square = 0.60368847567483053
                        },
                        new
                        {
                            Id = new Guid("d9483c88-149c-4208-b698-a178e46ede7c"),
                            Address = "4373 Gerlach Track, Trompview, Nigeria",
                            BedsCount = 3,
                            GuestsCount = 5,
                            Name = "Eos quisquam eos.",
                            OwnerId = "ba8a57b0-95e2-4064-9bdb-ebe5ddf8044e",
                            Rate = 0.053241091315546288,
                            ReviewsCount = 96L,
                            RoomsCount = 2,
                            Square = 0.095819201799158926
                        },
                        new
                        {
                            Id = new Guid("a8d7a7f0-6561-43fc-83f2-9bbeeed97121"),
                            Address = "51632 Christopher Trace, Morarmouth, Oman",
                            BedsCount = 8,
                            GuestsCount = 7,
                            Name = "Voluptates non pariatur.",
                            OwnerId = "ef52febd-2ea8-4a36-8164-606fedd5bdcd",
                            Rate = 0.052979433639450124,
                            ReviewsCount = 80L,
                            RoomsCount = 4,
                            Square = 0.59513722996450169
                        },
                        new
                        {
                            Id = new Guid("493f2dad-957f-4834-9def-e518316bce7c"),
                            Address = "8799 Janelle Land, Imanimouth, Nicaragua",
                            BedsCount = 2,
                            GuestsCount = 5,
                            Name = "Laboriosam quod saepe.",
                            OwnerId = "ef52febd-2ea8-4a36-8164-606fedd5bdcd",
                            Rate = 0.027210807946348742,
                            ReviewsCount = 588L,
                            RoomsCount = 4,
                            Square = 0.32506895770983751
                        },
                        new
                        {
                            Id = new Guid("49d54290-1d66-444d-ac93-d315d4d06778"),
                            Address = "3310 Wyman Extensions, Jonberg, Congo",
                            BedsCount = 2,
                            GuestsCount = 12,
                            Name = "Totam aut quod.",
                            OwnerId = "f7b3312d-ac3e-482a-82c1-24b3f0df84ae",
                            Rate = 0.049683043378912439,
                            ReviewsCount = 418L,
                            RoomsCount = 2,
                            Square = 0.15261330193068398
                        },
                        new
                        {
                            Id = new Guid("1fe8bce1-27a9-4749-814e-e48363601123"),
                            Address = "571 West Meadows, Donniemouth, Peru",
                            BedsCount = 3,
                            GuestsCount = 8,
                            Name = "Earum doloribus et.",
                            OwnerId = "f7b3312d-ac3e-482a-82c1-24b3f0df84ae",
                            Rate = 0.082817630568003231,
                            ReviewsCount = 619L,
                            RoomsCount = 3,
                            Square = 0.82432238364765487
                        },
                        new
                        {
                            Id = new Guid("32b60fc7-5fdb-4036-ab5d-1ba10eaade6c"),
                            Address = "1141 Leannon Run, Schambergerport, French Polynesia",
                            BedsCount = 8,
                            GuestsCount = 6,
                            Name = "Aut eveniet architecto.",
                            OwnerId = "b93c1225-e090-4cf6-9bdf-ee22e647a9f3",
                            Rate = 0.08623942645767177,
                            ReviewsCount = 397L,
                            RoomsCount = 2,
                            Square = 0.37959326280839584
                        },
                        new
                        {
                            Id = new Guid("ec35aa06-45e0-4515-a9d1-1c1c834337dc"),
                            Address = "342 Johnston Locks, New Brentchester, Lithuania",
                            BedsCount = 3,
                            GuestsCount = 4,
                            Name = "Perspiciatis in modi.",
                            OwnerId = "b93c1225-e090-4cf6-9bdf-ee22e647a9f3",
                            Rate = 0.049712483782661021,
                            ReviewsCount = 381L,
                            RoomsCount = 1,
                            Square = 0.78516409839881618
                        },
                        new
                        {
                            Id = new Guid("f18a0ff1-d3f6-49f7-99d3-b0e1d2df7951"),
                            Address = "21396 Obie Isle, Bradtkechester, Cuba",
                            BedsCount = 8,
                            GuestsCount = 2,
                            Name = "Consectetur ut aut.",
                            OwnerId = "40d54930-899b-491e-a73e-e7359cbecced",
                            Rate = 0.038001055553054039,
                            ReviewsCount = 477L,
                            RoomsCount = 1,
                            Square = 0.65945249940529227
                        },
                        new
                        {
                            Id = new Guid("2e9ebc73-1f2b-47ae-983f-a05521419269"),
                            Address = "9329 Grimes Forest, New Bryon, Central African Republic",
                            BedsCount = 4,
                            GuestsCount = 3,
                            Name = "Velit tempora maxime.",
                            OwnerId = "40d54930-899b-491e-a73e-e7359cbecced",
                            Rate = 0.039654651854748209,
                            ReviewsCount = 994L,
                            RoomsCount = 1,
                            Square = 0.37106119541311844
                        },
                        new
                        {
                            Id = new Guid("bdcc55d8-0cd0-4361-a983-4ef285503695"),
                            Address = "832 Mike Causeway, North Brennontown, Mali",
                            BedsCount = 2,
                            GuestsCount = 2,
                            Name = "Et qui in.",
                            OwnerId = "2d2a54a4-56a8-44e9-83c2-f5804b317261",
                            Rate = 0.061606619807367896,
                            ReviewsCount = 977L,
                            RoomsCount = 3,
                            Square = 0.34586976155600091
                        },
                        new
                        {
                            Id = new Guid("9635f2ff-5e40-4be8-865d-e77b086720e6"),
                            Address = "59593 Annalise Ranch, Port Westonstad, Kiribati",
                            BedsCount = 3,
                            GuestsCount = 2,
                            Name = "Aut iste ea.",
                            OwnerId = "2d2a54a4-56a8-44e9-83c2-f5804b317261",
                            Rate = 0.010194210894706093,
                            ReviewsCount = 926L,
                            RoomsCount = 4,
                            Square = 0.13832967362221241
                        },
                        new
                        {
                            Id = new Guid("ed61a9ab-2a76-4ee9-bd4f-1c60841d1b71"),
                            Address = "23537 O'Hara Key, Spencerbury, Seychelles",
                            BedsCount = 6,
                            GuestsCount = 3,
                            Name = "Illum accusantium debitis.",
                            OwnerId = "0a967d8d-d2e4-41e2-baba-50b6aa96f781",
                            Rate = 0.034315606397801887,
                            ReviewsCount = 737L,
                            RoomsCount = 3,
                            Square = 0.75160945537587065
                        },
                        new
                        {
                            Id = new Guid("c177a782-6004-4013-80a4-531f6d7a3c0b"),
                            Address = "06102 Stoltenberg Burg, Lake Miketown, Belarus",
                            BedsCount = 7,
                            GuestsCount = 5,
                            Name = "Magnam illo quibusdam.",
                            OwnerId = "0a967d8d-d2e4-41e2-baba-50b6aa96f781",
                            Rate = 0.091011207418321527,
                            ReviewsCount = 283L,
                            RoomsCount = 3,
                            Square = 0.39778635187132355
                        });
                });

            modelBuilder.Entity("Entities.Models.DateState", b =>
                {
                    b.Property<int>("DateStateId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DateStateId");

                    b.ToTable("DateState");

                    b.HasData(
                        new
                        {
                            DateStateId = 0,
                            Name = "Empty"
                        },
                        new
                        {
                            DateStateId = 1,
                            Name = "Reserved"
                        });
                });

            modelBuilder.Entity("Entities.Models.OccupState", b =>
                {
                    b.Property<int>("OccupStateId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OccupStateId");

                    b.ToTable("OccupState");

                    b.HasData(
                        new
                        {
                            OccupStateId = 0,
                            Name = "Created"
                        },
                        new
                        {
                            OccupStateId = 1,
                            Name = "Pushed"
                        },
                        new
                        {
                            OccupStateId = 2,
                            Name = "Submited"
                        },
                        new
                        {
                            OccupStateId = 3,
                            Name = "Reserved"
                        },
                        new
                        {
                            OccupStateId = 4,
                            Name = "Cancelled"
                        },
                        new
                        {
                            OccupStateId = 5,
                            Name = "Passed"
                        });
                });

            modelBuilder.Entity("Entities.Models.Occupancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EvictionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OccupStateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OccupancyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReservedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("OccupStateId");

                    b.HasIndex("ReservedById");

                    b.ToTable("Occupancies");
                });

            modelBuilder.Entity("Entities.Models.ReservationDate", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ApartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DateStateId")
                        .HasColumnType("int");

                    b.Property<decimal>("ExtraCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("OccupancyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Date", "ApartmentId");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("DateStateId");

                    b.HasIndex("OccupancyId");

                    b.ToTable("ReservationDates");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExperyTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b9cd9883-962a-4142-b293-1c9f10416063",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "37d92fb8-0ad4-47ad-a402-3ce8e3b2e9ca",
                            EmailConfirmed = false,
                            FirstName = "Robin",
                            LastName = "Okuneva",
                            LockoutEnabled = false,
                            PhoneNumber = "(353) 325-8241 x43499",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "0abbc8da-ed28-4305-846d-4463d26f0e8e",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "0323fbbf-53bd-47d6-a440-53ac523cf4d8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "370000e9-34e0-4d19-a1d2-503d64193c81",
                            EmailConfirmed = false,
                            FirstName = "Aubrey",
                            LastName = "Wunsch",
                            LockoutEnabled = false,
                            PhoneNumber = "458-309-6849 x814",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "51a443f3-bb1c-4c6c-abc8-75ec201f5fd9",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "d3948b32-992b-4165-acb1-1912bd51d3f7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ff798a0-31e3-417b-a900-66c23690d0ad",
                            EmailConfirmed = false,
                            FirstName = "Rex",
                            LastName = "Langosh",
                            LockoutEnabled = false,
                            PhoneNumber = "206.344.8223",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "6e08da98-1543-492a-b52e-22a0fdbf5106",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "ba8a57b0-95e2-4064-9bdb-ebe5ddf8044e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da63b836-a056-4ef2-a3d8-67c72ff41f66",
                            EmailConfirmed = false,
                            FirstName = "Brooklyn",
                            LastName = "Lueilwitz",
                            LockoutEnabled = false,
                            PhoneNumber = "687-257-2220 x777",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "ac5a3c31-e32a-48b0-9760-26a3f63ca1f7",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "ef52febd-2ea8-4a36-8164-606fedd5bdcd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d905446a-634b-4b81-a967-e57f4f66138e",
                            EmailConfirmed = false,
                            FirstName = "Asha",
                            LastName = "Kertzmann",
                            LockoutEnabled = false,
                            PhoneNumber = "361.595.0493 x678",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "c89710c1-39b2-4d09-a2a2-6453a0878ebb",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "f7b3312d-ac3e-482a-82c1-24b3f0df84ae",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75337130-b50d-4810-b006-be6ca577b402",
                            EmailConfirmed = false,
                            FirstName = "Ibrahim",
                            LastName = "VonRueden",
                            LockoutEnabled = false,
                            PhoneNumber = "392.402.6659 x97696",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "7e35a739-99c0-4b9e-8a22-34b6063dca9f",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "b93c1225-e090-4cf6-9bdf-ee22e647a9f3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9007c65f-92b4-487d-9ead-5a8efec66b32",
                            EmailConfirmed = false,
                            FirstName = "Deven",
                            LastName = "Abshire",
                            LockoutEnabled = false,
                            PhoneNumber = "(292) 785-3086 x3152",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "a9efd623-8c29-4ca5-8804-37b18b3bd48a",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "40d54930-899b-491e-a73e-e7359cbecced",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6bf8b093-3d21-4ded-94e1-836509c5ae24",
                            EmailConfirmed = false,
                            FirstName = "Lilian",
                            LastName = "Gibson",
                            LockoutEnabled = false,
                            PhoneNumber = "617-381-4379",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "3aa1ad1b-7416-4f12-9a9d-6b972d310784",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "2d2a54a4-56a8-44e9-83c2-f5804b317261",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9f5fe32-94e9-42f6-bdf8-24a90ba88300",
                            EmailConfirmed = false,
                            FirstName = "Hollis",
                            LastName = "Beer",
                            LockoutEnabled = false,
                            PhoneNumber = "400.490.9701",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "ffb438e6-a899-467a-8574-068efb0c0225",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "0a967d8d-d2e4-41e2-baba-50b6aa96f781",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38440c12-9f84-4f27-9ea7-d5b9d95eb1c7",
                            EmailConfirmed = false,
                            FirstName = "Selina",
                            LastName = "Pfannerstill",
                            LockoutEnabled = false,
                            PhoneNumber = "634.849.5232 x105",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "ef99b558-9330-4511-bc10-2d402824566d",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3f06c0f8-0a17-457a-9550-3a24bc574200",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "e09ca7ef-b41f-42a5-aa40-24a947e3cdb6",
                            Name = "ApartmentOwner",
                            NormalizedName = "APARTMENT_OWNER"
                        },
                        new
                        {
                            Id = "48f067fb-4f7b-4fc7-bd2e-b7e32aab0e6e",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "dd33f26b-ecf7-46dc-81b4-72a20ac57040",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Apartment", b =>
                {
                    b.HasOne("Entities.Models.User", "Owner")
                        .WithMany("Apartments")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Entities.Models.Occupancy", b =>
                {
                    b.HasOne("Entities.Models.Apartment", "Apartment")
                        .WithMany("Occupancies")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Models.OccupState", "State")
                        .WithMany("Occupancies")
                        .HasForeignKey("OccupStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "ReservedBy")
                        .WithMany("Occupancies")
                        .HasForeignKey("ReservedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Apartment");

                    b.Navigation("ReservedBy");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Entities.Models.ReservationDate", b =>
                {
                    b.HasOne("Entities.Models.Apartment", null)
                        .WithMany("ReservationDates")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.DateState", "DateState")
                        .WithMany("Dates")
                        .HasForeignKey("DateStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Occupancy", "Occupancy")
                        .WithMany("ReservedDates")
                        .HasForeignKey("OccupancyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DateState");

                    b.Navigation("Occupancy");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Apartment", b =>
                {
                    b.Navigation("Occupancies");

                    b.Navigation("ReservationDates");
                });

            modelBuilder.Entity("Entities.Models.DateState", b =>
                {
                    b.Navigation("Dates");
                });

            modelBuilder.Entity("Entities.Models.OccupState", b =>
                {
                    b.Navigation("Occupancies");
                });

            modelBuilder.Entity("Entities.Models.Occupancy", b =>
                {
                    b.Navigation("ReservedDates");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("Apartments");

                    b.Navigation("Occupancies");
                });
#pragma warning restore 612, 618
        }
    }
}

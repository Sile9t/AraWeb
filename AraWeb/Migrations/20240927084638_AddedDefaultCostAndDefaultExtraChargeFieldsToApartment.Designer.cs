// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace AraWeb.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240927084638_AddedDefaultCostAndDefaultExtraChargeFieldsToApartment")]
    partial class AddedDefaultCostAndDefaultExtraChargeFieldsToApartment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Apartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApartmentId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BedsCount")
                        .HasColumnType("int");

                    b.Property<double>("DefaultCost")
                        .HasColumnType("float");

                    b.Property<double>("DefaultExtraCharge")
                        .HasColumnType("float");

                    b.Property<int>("GuestsCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<long>("ReviewsCount")
                        .HasColumnType("bigint");

                    b.Property<int>("RoomsCount")
                        .HasColumnType("int");

                    b.Property<double>("Square")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Apartments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("54b5e55a-0edf-4753-9bdb-ea24d87c3edb"),
                            Address = "9425 Buck Ridge, New Bernadineland, Chile",
                            BedsCount = 4,
                            DefaultCost = 40.0,
                            DefaultExtraCharge = 60.0,
                            GuestsCount = 8,
                            Name = "Nam enim labore.",
                            OwnerId = new Guid("879e5154-671c-44b0-b5e8-e25fb8311e42"),
                            Rate = 1.1000000000000001,
                            ReviewsCount = 21L,
                            RoomsCount = 1,
                            Square = 44.409999999999997
                        },
                        new
                        {
                            Id = new Guid("a0402c34-0ba3-486e-85b9-95d20b485c86"),
                            Address = "37118 Marcellus Knoll, Lake Garett, Guinea",
                            BedsCount = 1,
                            DefaultCost = 70.0,
                            DefaultExtraCharge = 20.0,
                            GuestsCount = 6,
                            Name = "Et inventore iusto.",
                            OwnerId = new Guid("879e5154-671c-44b0-b5e8-e25fb8311e42"),
                            Rate = 8.8000000000000007,
                            ReviewsCount = 23L,
                            RoomsCount = 3,
                            Square = 58.600000000000001
                        },
                        new
                        {
                            Id = new Guid("32375e40-716c-494c-aad1-c7dfd7117572"),
                            Address = "4380 Terry Stream, Christiansenville, Panama",
                            BedsCount = 1,
                            DefaultCost = 120.0,
                            DefaultExtraCharge = 100.0,
                            GuestsCount = 3,
                            Name = "Fugit id sint.",
                            OwnerId = new Guid("89a6c731-813b-4a47-96ce-046f1c8c7701"),
                            Rate = 5.5999999999999996,
                            ReviewsCount = 95L,
                            RoomsCount = 2,
                            Square = 3.5600000000000001
                        },
                        new
                        {
                            Id = new Guid("d396cb3e-5b6d-4792-8503-deee8e631d51"),
                            Address = "171 Corkery Lodge, West Paytonburgh, Jersey",
                            BedsCount = 3,
                            DefaultCost = 180.0,
                            DefaultExtraCharge = 20.0,
                            GuestsCount = 11,
                            Name = "Maiores reiciendis alias.",
                            OwnerId = new Guid("89a6c731-813b-4a47-96ce-046f1c8c7701"),
                            Rate = 8.9000000000000004,
                            ReviewsCount = 63L,
                            RoomsCount = 4,
                            Square = 25.239999999999998
                        },
                        new
                        {
                            Id = new Guid("9b16ffb9-c984-4cb9-9847-2de559b1a546"),
                            Address = "77121 Filiberto Shores, Lake Roystad, El Salvador",
                            BedsCount = 4,
                            DefaultCost = 40.0,
                            DefaultExtraCharge = 80.0,
                            GuestsCount = 4,
                            Name = "Ullam quis sint.",
                            OwnerId = new Guid("d5e20af1-4375-4aaa-8ced-69e97c6f4e81"),
                            Rate = 0.90000000000000002,
                            ReviewsCount = 43L,
                            RoomsCount = 4,
                            Square = 72.620000000000005
                        },
                        new
                        {
                            Id = new Guid("73ea65c2-0c14-47f0-914e-e0fc4e934df3"),
                            Address = "9895 Joan Rue, Danielaville, Armenia",
                            BedsCount = 8,
                            DefaultCost = 120.0,
                            DefaultExtraCharge = 40.0,
                            GuestsCount = 12,
                            Name = "Itaque aut consequatur.",
                            OwnerId = new Guid("d5e20af1-4375-4aaa-8ced-69e97c6f4e81"),
                            Rate = 6.0999999999999996,
                            ReviewsCount = 44L,
                            RoomsCount = 2,
                            Square = 84.840000000000003
                        },
                        new
                        {
                            Id = new Guid("19dbca47-04d5-4337-bd8d-fbf2d3ce4660"),
                            Address = "4420 West Fork, Marciaport, United States Minor Outlying Islands",
                            BedsCount = 5,
                            DefaultCost = 110.0,
                            DefaultExtraCharge = 40.0,
                            GuestsCount = 7,
                            Name = "Esse quo expedita.",
                            OwnerId = new Guid("88646f6b-485e-4373-9136-342f429e3404"),
                            Rate = 3.2000000000000002,
                            ReviewsCount = 56L,
                            RoomsCount = 3,
                            Square = 81.5
                        },
                        new
                        {
                            Id = new Guid("64e6bddb-e045-4cb1-b806-86dc29fbe39a"),
                            Address = "426 Geraldine Brook, Barbaraland, Mauritania",
                            BedsCount = 2,
                            DefaultCost = 60.0,
                            DefaultExtraCharge = 80.0,
                            GuestsCount = 10,
                            Name = "Ea non culpa.",
                            OwnerId = new Guid("88646f6b-485e-4373-9136-342f429e3404"),
                            Rate = 1.6000000000000001,
                            ReviewsCount = 89L,
                            RoomsCount = 1,
                            Square = 6.2599999999999998
                        },
                        new
                        {
                            Id = new Guid("f47b8671-c9ab-4307-86ef-27373afc43bf"),
                            Address = "88446 Wisozk Mountain, Port Ivah, Holy See (Vatican City State)",
                            BedsCount = 4,
                            DefaultCost = 170.0,
                            DefaultExtraCharge = 100.0,
                            GuestsCount = 12,
                            Name = "Veniam rerum voluptas.",
                            OwnerId = new Guid("364c3e79-f92f-4b6d-9380-f4940e848d63"),
                            Rate = 9.4000000000000004,
                            ReviewsCount = 24L,
                            RoomsCount = 2,
                            Square = 61.700000000000003
                        },
                        new
                        {
                            Id = new Guid("39b50519-69a5-402f-9364-94f0f3d2708e"),
                            Address = "691 Alexander Station, East Sister, Trinidad and Tobago",
                            BedsCount = 4,
                            DefaultCost = 60.0,
                            DefaultExtraCharge = 10.0,
                            GuestsCount = 6,
                            Name = "Non at hic.",
                            OwnerId = new Guid("364c3e79-f92f-4b6d-9380-f4940e848d63"),
                            Rate = 6.2999999999999998,
                            ReviewsCount = 72L,
                            RoomsCount = 2,
                            Square = 8.2799999999999994
                        },
                        new
                        {
                            Id = new Guid("eb489456-c07c-4012-a00d-415c9587961b"),
                            Address = "1277 Yundt Passage, Shaynaside, Belize",
                            BedsCount = 4,
                            DefaultCost = 170.0,
                            DefaultExtraCharge = 90.0,
                            GuestsCount = 5,
                            Name = "Distinctio sed laboriosam.",
                            OwnerId = new Guid("728fab6f-ebd1-4f2c-a1ad-fdb57633f798"),
                            Rate = 0.80000000000000004,
                            ReviewsCount = 49L,
                            RoomsCount = 2,
                            Square = 2.1299999999999999
                        },
                        new
                        {
                            Id = new Guid("caffc6bf-52ea-45fd-b229-179a20b14a7c"),
                            Address = "7860 VonRueden Islands, Schowalterhaven, Sri Lanka",
                            BedsCount = 8,
                            DefaultCost = 130.0,
                            DefaultExtraCharge = 20.0,
                            GuestsCount = 10,
                            Name = "Qui fugit neque.",
                            OwnerId = new Guid("728fab6f-ebd1-4f2c-a1ad-fdb57633f798"),
                            Rate = 0.20000000000000001,
                            ReviewsCount = 49L,
                            RoomsCount = 2,
                            Square = 87.980000000000004
                        },
                        new
                        {
                            Id = new Guid("ecdfd4c4-525e-4c57-aaf2-e5ee66f75ce0"),
                            Address = "144 Fay Vista, Melvinton, France",
                            BedsCount = 8,
                            DefaultCost = 130.0,
                            DefaultExtraCharge = 30.0,
                            GuestsCount = 12,
                            Name = "Velit pariatur debitis.",
                            OwnerId = new Guid("2ee2b5ac-8dc4-4626-8805-37a9e7635410"),
                            Rate = 0.29999999999999999,
                            ReviewsCount = 89L,
                            RoomsCount = 3,
                            Square = 78.879999999999995
                        },
                        new
                        {
                            Id = new Guid("960508c5-aefd-4e9c-956b-e07ea25d1498"),
                            Address = "838 King River, Lake Tressafurt, Italy",
                            BedsCount = 5,
                            DefaultCost = 20.0,
                            DefaultExtraCharge = 90.0,
                            GuestsCount = 8,
                            Name = "Similique et culpa.",
                            OwnerId = new Guid("2ee2b5ac-8dc4-4626-8805-37a9e7635410"),
                            Rate = 1.8999999999999999,
                            ReviewsCount = 93L,
                            RoomsCount = 4,
                            Square = 77.530000000000001
                        },
                        new
                        {
                            Id = new Guid("df052e5b-a4c4-40ae-9a86-1893bd304add"),
                            Address = "1909 Peggie Motorway, Port Ernestoview, Jordan",
                            BedsCount = 6,
                            DefaultCost = 130.0,
                            DefaultExtraCharge = 80.0,
                            GuestsCount = 6,
                            Name = "Sapiente quisquam tenetur.",
                            OwnerId = new Guid("8630a908-87f1-4995-9629-16e8d10d274c"),
                            Rate = 1.8999999999999999,
                            ReviewsCount = 36L,
                            RoomsCount = 1,
                            Square = 13.99
                        },
                        new
                        {
                            Id = new Guid("e9b48f41-d1b1-449d-b96c-6661667e1233"),
                            Address = "47583 Stiedemann Glen, East Meredith, Costa Rica",
                            BedsCount = 1,
                            DefaultCost = 50.0,
                            DefaultExtraCharge = 30.0,
                            GuestsCount = 3,
                            Name = "Qui sit nihil.",
                            OwnerId = new Guid("8630a908-87f1-4995-9629-16e8d10d274c"),
                            Rate = 1.6000000000000001,
                            ReviewsCount = 1L,
                            RoomsCount = 2,
                            Square = 74.790000000000006
                        },
                        new
                        {
                            Id = new Guid("8d839c72-18d1-4ffd-a0f2-3002279d48cc"),
                            Address = "67734 Schamberger Mission, South Mabel, Seychelles",
                            BedsCount = 2,
                            DefaultCost = 170.0,
                            DefaultExtraCharge = 90.0,
                            GuestsCount = 1,
                            Name = "Eos omnis consequatur.",
                            OwnerId = new Guid("1785bd47-756e-4049-9b65-abb5f2a21b88"),
                            Rate = 6.5999999999999996,
                            ReviewsCount = 28L,
                            RoomsCount = 4,
                            Square = 83.989999999999995
                        },
                        new
                        {
                            Id = new Guid("9b0c291a-7cc8-48be-881e-21d4769de2d6"),
                            Address = "11954 Brendon Brook, Lake Athena, Argentina",
                            BedsCount = 7,
                            DefaultCost = 120.0,
                            DefaultExtraCharge = 10.0,
                            GuestsCount = 10,
                            Name = "Cupiditate reprehenderit rem.",
                            OwnerId = new Guid("1785bd47-756e-4049-9b65-abb5f2a21b88"),
                            Rate = 9.3000000000000007,
                            ReviewsCount = 65L,
                            RoomsCount = 2,
                            Square = 0.28000000000000003
                        },
                        new
                        {
                            Id = new Guid("cb5e21d2-7b56-4260-9a82-714ba9440889"),
                            Address = "73015 Lynch Estates, Chadchester, Uganda",
                            BedsCount = 7,
                            DefaultCost = 80.0,
                            DefaultExtraCharge = 10.0,
                            GuestsCount = 5,
                            Name = "Aut nihil veniam.",
                            OwnerId = new Guid("3b47cdb6-e554-48c7-9586-818eb2753dba"),
                            Rate = 0.10000000000000001,
                            ReviewsCount = 43L,
                            RoomsCount = 2,
                            Square = 22.530000000000001
                        },
                        new
                        {
                            Id = new Guid("1c78c410-2e16-4c13-81bd-fd09bf7fe2cc"),
                            Address = "36466 Yundt Parkways, West Malvina, Slovenia",
                            BedsCount = 1,
                            DefaultCost = 100.0,
                            DefaultExtraCharge = 60.0,
                            GuestsCount = 12,
                            Name = "Iste distinctio molestias.",
                            OwnerId = new Guid("3b47cdb6-e554-48c7-9586-818eb2753dba"),
                            Rate = 0.59999999999999998,
                            ReviewsCount = 75L,
                            RoomsCount = 3,
                            Square = 78.239999999999995
                        });
                });

            modelBuilder.Entity("Entities.Models.DateState", b =>
                {
                    b.Property<int>("DateStateId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DateStateId");

                    b.ToTable("DateState");

                    b.HasData(
                        new
                        {
                            DateStateId = 0,
                            Name = "Empty"
                        },
                        new
                        {
                            DateStateId = 1,
                            Name = "Reserved"
                        });
                });

            modelBuilder.Entity("Entities.Models.OccupState", b =>
                {
                    b.Property<int>("OccupStateId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OccupStateId");

                    b.ToTable("OccupState");

                    b.HasData(
                        new
                        {
                            OccupStateId = 0,
                            Name = "Created"
                        },
                        new
                        {
                            OccupStateId = 1,
                            Name = "Pushed"
                        },
                        new
                        {
                            OccupStateId = 2,
                            Name = "Submitted"
                        },
                        new
                        {
                            OccupStateId = 3,
                            Name = "Reserved"
                        },
                        new
                        {
                            OccupStateId = 4,
                            Name = "Cancelled"
                        },
                        new
                        {
                            OccupStateId = 5,
                            Name = "Passed"
                        });
                });

            modelBuilder.Entity("Entities.Models.Occupancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EvictionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OccupStateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OccupancyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReservedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("OccupStateId");

                    b.HasIndex("ReservedById");

                    b.ToTable("Occupancies");
                });

            modelBuilder.Entity("Entities.Models.ReservationDate", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ApartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<int>("DateStateId")
                        .HasColumnType("int");

                    b.Property<double>("ExtraCharge")
                        .HasColumnType("float");

                    b.Property<Guid?>("OccupancyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Date", "ApartmentId");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("DateStateId");

                    b.HasIndex("OccupancyId");

                    b.ToTable("ReservationDates");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExperyTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("879e5154-671c-44b0-b5e8-e25fb8311e42"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d951cd91-c70d-4df8-bcb3-5bc531851d0b",
                            EmailConfirmed = false,
                            FirstName = "Fleta",
                            LastName = "Spencer",
                            LockoutEnabled = false,
                            PhoneNumber = "1-366-539-4683",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("89a6c731-813b-4a47-96ce-046f1c8c7701"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "045608bf-d7f1-496b-ba97-422b65b93d09",
                            EmailConfirmed = false,
                            FirstName = "Stacy",
                            LastName = "Cormier",
                            LockoutEnabled = false,
                            PhoneNumber = "352-604-7464",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("d5e20af1-4375-4aaa-8ced-69e97c6f4e81"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4935f16a-226f-430b-86ae-a49280f1e287",
                            EmailConfirmed = false,
                            FirstName = "Verla",
                            LastName = "Rogahn",
                            LockoutEnabled = false,
                            PhoneNumber = "349-968-4851",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("88646f6b-485e-4373-9136-342f429e3404"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17a4dac2-8cc9-4be6-a01b-9fe7f5a60aef",
                            EmailConfirmed = false,
                            FirstName = "Isai",
                            LastName = "Legros",
                            LockoutEnabled = false,
                            PhoneNumber = "1-906-652-4381",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("364c3e79-f92f-4b6d-9380-f4940e848d63"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44644148-7509-46b1-bd29-830332c1cddc",
                            EmailConfirmed = false,
                            FirstName = "Meaghan",
                            LastName = "Schowalter",
                            LockoutEnabled = false,
                            PhoneNumber = "(823) 677-9679 x2960",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("728fab6f-ebd1-4f2c-a1ad-fdb57633f798"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb97f8c1-73a5-4652-9666-621c7f119d0e",
                            EmailConfirmed = false,
                            FirstName = "Reid",
                            LastName = "Moore",
                            LockoutEnabled = false,
                            PhoneNumber = "(978) 581-8611 x28259",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("2ee2b5ac-8dc4-4626-8805-37a9e7635410"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a1ba570-dc99-4354-b179-2e96eaa1652a",
                            EmailConfirmed = false,
                            FirstName = "Stevie",
                            LastName = "Towne",
                            LockoutEnabled = false,
                            PhoneNumber = "1-715-622-9457 x9137",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("8630a908-87f1-4995-9629-16e8d10d274c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1be9321-94d5-4f3b-8a01-c60880741ef2",
                            EmailConfirmed = false,
                            FirstName = "Cornelius",
                            LastName = "Roob",
                            LockoutEnabled = false,
                            PhoneNumber = "(600) 285-0666",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("1785bd47-756e-4049-9b65-abb5f2a21b88"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7a87b0c-3b32-47a8-a41b-e0228af6a485",
                            EmailConfirmed = false,
                            FirstName = "Fabian",
                            LastName = "Heidenreich",
                            LockoutEnabled = false,
                            PhoneNumber = "(461) 483-0373 x823",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("3b47cdb6-e554-48c7-9586-818eb2753dba"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36a29456-2463-447e-9693-d473fafbc612",
                            EmailConfirmed = false,
                            FirstName = "Dax",
                            LastName = "Schulist",
                            LockoutEnabled = false,
                            PhoneNumber = "733.770.1238 x1170",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExperyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8bc1622-13d4-492d-8d42-7a457047f1b2"),
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("80e75fbb-5000-43aa-8993-11ce499f016d"),
                            Name = "ApartmentOwner",
                            NormalizedName = "APARTMENT_OWNER"
                        },
                        new
                        {
                            Id = new Guid("197e246e-1c72-4024-bb38-0ab03b90c963"),
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("87f9a03d-e289-44b8-a358-78f349bc6038"),
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Apartment", b =>
                {
                    b.HasOne("Entities.Models.User", "Owner")
                        .WithMany("Apartments")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Entities.Models.Occupancy", b =>
                {
                    b.HasOne("Entities.Models.Apartment", "Apartment")
                        .WithMany("Occupancies")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Models.OccupState", "State")
                        .WithMany("Occupancies")
                        .HasForeignKey("OccupStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "ReservedBy")
                        .WithMany("Occupancies")
                        .HasForeignKey("ReservedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Apartment");

                    b.Navigation("ReservedBy");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Entities.Models.ReservationDate", b =>
                {
                    b.HasOne("Entities.Models.Apartment", null)
                        .WithMany("ReservationDates")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.DateState", "DateState")
                        .WithMany("Dates")
                        .HasForeignKey("DateStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Occupancy", "Occupancy")
                        .WithMany("ReservedDates")
                        .HasForeignKey("OccupancyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DateState");

                    b.Navigation("Occupancy");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Apartment", b =>
                {
                    b.Navigation("Occupancies");

                    b.Navigation("ReservationDates");
                });

            modelBuilder.Entity("Entities.Models.DateState", b =>
                {
                    b.Navigation("Dates");
                });

            modelBuilder.Entity("Entities.Models.OccupState", b =>
                {
                    b.Navigation("Occupancies");
                });

            modelBuilder.Entity("Entities.Models.Occupancy", b =>
                {
                    b.Navigation("ReservedDates");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("Apartments");

                    b.Navigation("Occupancies");
                });
#pragma warning restore 612, 618
        }
    }
}
